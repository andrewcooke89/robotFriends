{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/scroll.js","components/ErrorBoundry.js","components/AddRobot.js","store/actions/fetchRobots.js","store/actions/actionTypes.js","components/DeleteRobot.js","containers/App.js","store/actions/searchField.js","serviceWorker.js","store/reducers/searchFieldReducer.js","store/reducers/robotsReducer.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","AddRobot","robot","_this2","event","Object","objectSpread","target","value","console","log","padding","marginLeft","borderRadius","onClick","robotsArr","robotId","Math","random","newRobot","push","onAddRobot","connect","robotsReducer","dispatch","payload","AddRobots","DeleteRobot","App","onRequestRobots","_this","filteredRobots","filter","toLocaleLowerCase","includes","searchField","length","components_AddRobot","components_DeleteRobot","components_SearchBox","onSearchChange","components_scroll","components_ErrorBoundry","components_CardList","searchFieldReducer","isPending","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialState","reducer","arguments","undefined","action","robotName","robotEmail","logger","createLogger","rootReducers","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cf63658d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js';\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <div>\r\n        {\r\n           robots.map((user, i) => {\r\n            return (\r\n                <Card \r\n                    key={i} \r\n                    id={robots[i].id} \r\n                    name={robots[i].name} \r\n                    email={robots[i].email} \r\n                    />\r\n                );\r\n            })\r\n        }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n                className='pa3 ba b--greeb bg-lightest-blue' \r\n                type='search' \r\n                placeholder='Search Robots'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '600px'}}>\r\n            {props.children}\r\n        </div>\r\n    ) \r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    state = {\r\n        hasError: false\r\n    }\r\n\r\n    componentDidCatch (error, info) {\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError) {\r\n            return <h1>Oppps that is not good</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { AddRobots } from \"../store/actions/fetchRobots\";\r\n\r\nclass AddRobot extends Component {\r\n  state = {\r\n    robot: {\r\n      name: \"\",\r\n      email: \"\",\r\n      id: null\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const onRobotNameChange = event => {\r\n      const robot = { ...this.state.robot };\r\n      robot.name = event.target.value;\r\n      this.setState({ robot: robot });\r\n      console.log(this.state.robot);\r\n    };\r\n\r\n    const onRobotEmailChange = event => {\r\n      const robot = { ...this.state.robot };\r\n      robot.email = event.target.value;\r\n      this.setState({ robot: robot });\r\n      console.log(this.state.robot);\r\n    };\r\n\r\n    const addRobot = () => {\r\n      const robotsArr = this.props.robots;\r\n      const robotId = Math.random();\r\n      const newRobot = { ...this.state.robot };\r\n      newRobot.id = robotId;\r\n      this.setState({ robot: newRobot });\r\n      robotsArr.push(this.state.robot);\r\n      this.props.onAddRobot(robotsArr);\r\n    };\r\n\r\n    const styles = {\r\n      padding: \"5px\",\r\n      marginLeft: \"10px\",\r\n      borderRadius: \"5px\",\r\n      height: \"50px\"\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          name=\"robotName\"\r\n          placeholder=\"Name\"\r\n          className=\"pa3 ba b--greeb bg-lightest-blue\"\r\n          onChange={onRobotNameChange}\r\n        />\r\n        <input\r\n          type=\"email\"\r\n          name=\"robotEmail\"\r\n          placeholder=\"Email\"\r\n          className=\"pa3 ba b--greeb bg-lightest-blue\"\r\n          onChange={onRobotEmailChange}\r\n        />\r\n        <button className=\"bg-lightest-blue\" style={styles} onClick={addRobot}>\r\n          Add Robot\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    robots: state.robotsReducer.robots\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onAddRobot: robot => dispatch(AddRobots(robot))\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(AddRobot);\r\n","import * as actionTypes from \"./actionTypes\";\r\n\r\nexport const requestRobots = () => dispatch => {\r\n  dispatch({ type: actionTypes.FETCH_ROBOTS_START });\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then(response => response.json())\r\n    .then(data =>\r\n      dispatch({ type: actionTypes.FETCH_ROBOTS_SUCCESS, payload: data })\r\n    )\r\n    .catch(error =>\r\n      dispatch({ type: actionTypes.FETCH_ROBOTS_FAIL, payload: error })\r\n    );\r\n};\r\n\r\nexport const AddRobots = robot => ({\r\n  type: actionTypes.ADD_ROBOT,\r\n  payload: robot\r\n});\r\n","export const SEARCH_CHANGE = \"SEARCH_CHANGE\";\r\n\r\nexport const FETCH_ROBOTS_START = \"FETCH_ROBOTS_START\";\r\nexport const FETCH_ROBOTS_SUCCESS = \"FETCH_ROBOTS_SUCCESS\";\r\nexport const FETCH_ROBOTS_FAIL = \"FETCH_ROBOTS_FAIL\";\r\n\r\nexport const ADD_ROBOT = \"ADD_ROBOT\";\r\n","import React from \"react\";\r\n\r\nconst DeleteRobot = () => {\r\n  const styles = {\r\n    padding: \"5px\",\r\n    marginLeft: \"10px\",\r\n    borderRadius: \"5px\",\r\n    height: \"50px\"\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Robot Name\"\r\n        className=\"pa3 ba b--greeb bg-lightest-blue\"\r\n      />\r\n      <button className=\"bg-lightest-blue\" style={styles}>\r\n        Delete Robot\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DeleteRobot;\r\n","import React, { Component } from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport \"./App.css\";\r\nimport Scroll from \"../components/scroll\";\r\nimport ErrorBoundry from \"../components/ErrorBoundry\";\r\nimport * as actions from \"../store/actions/searchField\";\r\nimport { requestRobots } from \"../store/actions/fetchRobots\";\r\nimport { connect } from \"react-redux\";\r\nimport AddRobot from \"../components/AddRobot\";\r\nimport DeleteRobot from \"../components/DeleteRobot\";\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const { robots } = this.props;\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name\r\n        .toLocaleLowerCase()\r\n        .includes(this.props.searchField.toLocaleLowerCase());\r\n    });\r\n\r\n    return !robots.length ? (\r\n      <h1>Loading...</h1>\r\n    ) : (\r\n      <div className=\"tc\">\r\n        <h1 className=\"f2\">RoboFriends</h1>\r\n        <AddRobot />\r\n        <DeleteRobot />\r\n        <SearchBox searchChange={this.props.onSearchChange} />\r\n        <Scroll>\r\n          <ErrorBoundry>\r\n            <CardList robots={filteredRobots} />\r\n          </ErrorBoundry>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchFieldReducer.searchField,\r\n    robots: state.robotsReducer.robots,\r\n    isPending: state.robotsReducer.isPending\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSearchChange: event => dispatch(actions.searchChange(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);\r\n","import * as actionTypes from './actionTypes';\r\n\r\nexport const searchChange = (text) => ({type: actionTypes.SEARCH_CHANGE, payload: text })\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { SEARCH_CHANGE } from \"../actions/actionTypes\";\r\n\r\n\r\nconst initialState = {\r\n    searchField: ''\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type){\r\n        case SEARCH_CHANGE :\r\n            return {\r\n                ...state,\r\n                searchField : action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default reducer;","import * as actionTypes from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n  robots: [],\r\n  isPending: false,\r\n  error: null,\r\n  robot: {\r\n    robotName: \"\",\r\n    robotEmail: \"\"\r\n  }\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.FETCH_ROBOTS_START:\r\n      return {\r\n        ...state,\r\n        isPending: true\r\n      };\r\n    case actionTypes.FETCH_ROBOTS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        robots: action.payload,\r\n        isPending: false\r\n      };\r\n    case actionTypes.FETCH_ROBOTS_FAIL:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        isPending: false\r\n      };\r\n    case actionTypes.ADD_ROBOT:\r\n      return {\r\n        ...state,\r\n        robots: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider,  } from 'react-redux';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport {  createStore, applyMiddleware, combineReducers, } from 'redux';\nimport searchFieldReducer from './store/reducers/searchFieldReducer'\nimport robotsReducer from './store/reducers/robotsReducer';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nconst logger = createLogger()\n\nconst rootReducers = combineReducers({robotsReducer, searchFieldReducer})\n\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger))\n \n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}